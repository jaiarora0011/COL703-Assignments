
open Propositions

%%

%name Flasl
%pos int

%term EOF | APROP of string | RPAREN | LPAREN | NOT | AND | OR | IF | THEN
      | ELSE | IFF | THEREFORE | PERIOD

%nonterm start of Argument | prop_list of Prop list |  prop of Prop

%eop EOF
%noshift EOF

%right IFF    (* These rules makes the grammar unambiguous *)
%right IF THEN ELSE
%left OR
%left AND
%nonassoc NOT
%verbose


%%

start : prop_list THEREFORE prop PERIOD     (HENCE(prop_list, prop))

prop_list: prop PERIOD prop_list            (prop :: prop_list)
          |                                 ([])

prop: APROP                                 (ATOM(APROP))
    | NOT prop                              (NOT(prop))
    | prop AND prop                         (AND(prop1, prop2))
    | prop OR prop                          (OR(prop1, prop2))
    | IF prop THEN prop                     (COND(prop1, prop2))
    | prop IF prop                          (COND(prop2, prop1))
    | prop IFF prop                         (BIC(prop1, prop2))
    | IF prop THEN prop ELSE prop           (ITE(prop1, prop2, prop3))
    | LPAREN prop RPAREN                    (prop)
